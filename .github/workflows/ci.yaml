name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        include:
          - build_type: Debug
            build_dir: build
            build_arg: ""
          - build_type: Release
            build_dir: build_release
            build_arg: "--Release"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake flex libfl-dev bison

      - name: Build project (Linux - ${{ matrix.build_type }})
        run: |
          chmod +x Build.sh
          ./Build.sh ${{ matrix.build_arg }}

      - name: Upload build artifacts (Linux - ${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-linux-${{ matrix.build_type }}
          path: ${{ matrix.build_dir }}
          
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        include:
          - build_type: Debug
            build_dir: build
            build_arg: "--noTest"
          - build_type: Release
            build_dir: build_release
            build_arg: "--Release --noTest"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install MSYS2 (bison & flex)
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANG64
          path-type: minimal
          install: |
            base-devel
            gcc
            make
            flex
            bison
            cmake
            mingw-w64-x86_64-toolchain


      - name: Build project (Windows - ${{ matrix.build_type }})
        shell: msys2 {0}
        run: |
          chmod +x Build.sh
          ./Build.sh ${{ matrix.build_arg }}

      - name: Upload build artifacts (Windows - ${{ matrix.build_type }})
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-windows-${{ matrix.build_type }}
          path: ${{ matrix.build_dir }}

  run-app-windows-debug:
    needs: build-windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download build artifacts (Windows Debug)
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-windows-Debug
          path: build

      - name: Run App retranslate (Windows Debug)
        shell: bash
        run: |
          bash runApp --retranslate --figuresJsonPath build/figures.json --outputFilePath build/code.txt --logFilePath build/logRet.log

      - name: Run App translate (Windows Debug)
        shell: bash
        run: |
          bash runApp --translate --codeFilePath build/CODE1.txt --outputFilePath build/figures.json --logFilePath build/log.log

  run-app-windows-release:
    needs: build-windows
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download build artifacts (Windows Release)
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-windows-Release
          path: build_release

      - name: Run App retranslate (Windows Release)
        shell: bash
        run: |
          bash runApp --Release --retranslate --figuresJsonPath build_release/figures.json --outputFilePath build_release/code.txt --logFilePath build_release/logRet.log

      - name: Run App translate (Windows Debug)
        shell: bash
        run: |
          bash runApp --Release --translate --codeFilePath build_release/CODE1.txt --outputFilePath build_release/figures.json --logFilePath build_release/log.log

  tests-linux-debug:
    needs: build-linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake flex libfl-dev bison

      - name: Download build artifacts (Linux Debug)
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-linux-Debug
          path: build

      - name: Run tests
        run: |
          chmod +x runTest
          find . -type f -name "*Test" -print0 | xargs -0 chmod +x
          ./runTest --all

  tests-linux-release:
    needs: build-linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake flex libfl-dev bison

      - name: Download build artifacts (Linux Release)
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-linux-Release
          path: build_release

      - name: Run tests
        run: |
          chmod +x runTest
          find . -type f -name "*Test" -print0 | xargs -0 chmod +x
          ./runTest --Release --all
