DECLARE CANVAS_WIDTH, CANVAS_HEIGHT AS INTEGER
CANVAS_WIDTH = 1000  # Ширина холста по умолчанию
CANVAS_HEIGHT = 800  # Высота холста по умолчанию

DECLARE DEFAULT_SPACING AS INTEGER
DEFAULT_SPACING = 50  # Минимальное расстояние между объектами

DECLARE SHAPE_SIZES AS MAP OF SHAPE TO (width, height)
SHAPE_SIZES["circle"] = (100, 100)    # Диаметр круга по умолчанию
SHAPE_SIZES["rectangle"] = (120, 80)  # Размеры прямоугольника
SHAPE_SIZES["diamond"] = (100, 100)   # Размеры ромба
SHAPE_SIZES["note"] = (150, 100)      # Размер заметки по умолчанию

# Вспомогательная функция поиска максимальной ширины фигуры
FUNCTION MAX_SHAPE_WIDTH():
    DECLARE max_width AS INTEGER = 0
    FOR shape, size IN SHAPE_SIZES:
        IF size.width > max_width:
            max_width = size.width
    RETURN max_width

# Вспомогательная функция поиска максимальной высоты фигуры
FUNCTION MAX_SHAPE_HEIGHT():
    DECLARE max_height AS INTEGER = 0
    FOR shape, size IN SHAPE_SIZES:
        IF size.height > max_height:
            max_height = size.height
    RETURN max_height

# Вспомогательная функция поиска объекта по ID
FUNCTION FIND_OBJECT_BY_ID(id, objects):
    FOR obj IN objects:
        IF obj.id == id:
            RETURN obj
    RETURN NULL

# Структура для хранения информации об объекте
STRUCT ObjectInfo:
    id AS STRING
    shape AS STRING
    x AS INTEGER
    y AS INTEGER
    width AS INTEGER
    height AS INTEGER
    properties AS MAP OF PROPERTY_KEY TO VALUE

# Структура для хранения информации о связи
STRUCT RelationInfo:
    id1 AS STRING
    id2 AS STRING
    arrow_type AS STRING
    points AS LIST OF (x, y)  # контрольные точки

# Основная функция расстановки
FUNCTION layout_objects(program_tree):
    # Собираем информацию обо всех объектах и связях
    DECLARE objects AS LIST OF ObjectInfo
    DECLARE relations AS LIST OF RelationInfo
    
    # 1. Анализ программы и сбор информации
    analyze_program(program_tree, objects, relations)
    
    # 2. Разделяем объекты на связанные компоненты (группы связанных объектов)
    DECLARE components AS LIST OF LIST OF ObjectInfo
    components = find_connected_components(objects, relations)
    
    # 3. Распределяем компоненты по холсту
    DECLARE current_x, current_y AS INTEGER
    current_x = DEFAULT_SPACING
    current_y = DEFAULT_SPACING
    DECLARE max_height_in_row AS INTEGER = 0
    
    FOR component IN components:
        # 3.1. Рассчитываем размер компоненты
        DECLARE component_width, component_height AS INTEGER
        component_width, component_height = calculate_component_size(component, relations)
        
        # Проверяем, помещается ли компонента в текущей строке
        IF current_x + component_width > CANVAS_WIDTH:
            # Переходим на новую строку
            current_x = DEFAULT_SPACING
            current_y += max_height_in_row + DEFAULT_SPACING
            max_height_in_row = 0
        
        # 3.2. Располагаем объекты внутри компоненты
        layout_component(component, relations, current_x, current_y)
        
        # Обновляем позицию для следующей компоненты
        current_x += component_width + DEFAULT_SPACING
        IF component_height > max_height_in_row:
            max_height_in_row = component_height
    
    # 4. Генерируем координаты для связей
    generate_relation_points(objects, relations)
    
    # Возвращаем объекты с координатами
    RETURN objects, relations

# Функция анализа программы и сбора информации 
FUNCTION analyze_program(program_tree, objects, relations):
    FOR statement IN program_tree.statements:
        IF statement IS object_decl OR statement IS note:
            # Создаем информацию об объекте
            DECLARE obj AS ObjectInfo
            obj.id = statement.ID
            obj.shape = statement.TYPE  # 'circle', 'rectangle', 'diamond' или 'note'
            obj.width, obj.height = SHAPE_SIZES[obj.shape]
            
            # Проверяем свойства из объявления
            FOR property IN statement.properties:
                IF property.key == "x" AND IS_NUMBER(property.value):
                    obj.x = property.value
                ELIF property.key == "y" AND IS_NUMBER(property.value):
                    obj.y = property.value
                ELIF property.key == "size_A" AND IS_NUMBER(property.value):
                    obj.width = property.value
                ELIF property.key == "size_B" AND IS_NUMBER(property.value):
                    obj.height = property.value
                ELIF property.key == "radius" AND IS_NUMBER(property.value):
                    obj.width = obj.height = property.value * 2
                ELIF property.key == "size_text" AND IS_NUMBER(property.value):
                    IF obj.shape == "note":
                        obj.height = MAX(obj.height, property.value * 2)
            
            ADD obj TO objects
            
        ELIF statement IS relation:
            # Создаем информацию о связи
            DECLARE rel AS RelationInfo
            rel.id1 = statement.ID1
            rel.id2 = statement.ID2
            rel.arrow_type = statement.ARROW
            ADD rel TO relations

# Функция поиска связанных компонент 
FUNCTION find_connected_components(objects, relations):
    DECLARE visited AS SET
    DECLARE components AS LIST OF LIST OF ObjectInfo
    
    FOR obj IN objects:
        IF obj.id NOT IN visited:
            DECLARE component AS LIST OF ObjectInfo
            dfs_find_component(obj, relations, visited, component)
            ADD component TO components
    
    RETURN components

# Вспомогательная функция поиска в глубину 
FUNCTION dfs_find_component(obj, relations, visited, component):
    ADD obj.id TO visited
    ADD obj TO component
    
    # Находим все связанные объекты
    FOR rel IN relations:
        IF rel.id1 == obj.id:
            DECLARE neighbor AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id2, objects)
            IF neighbor AND neighbor.id NOT IN visited:
                dfs_find_component(neighbor, relations, visited, component)
        ELIF rel.id2 == obj.id:
            DECLARE neighbor AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id1, objects)
            IF neighbor AND neighbor.id NOT IN visited:
                dfs_find_component(neighbor, relations, visited, component)


# Функция расчета размера компоненты 
FUNCTION calculate_component_size(component, relations):
    # Если в компоненте только один объект
    IF LENGTH(component) == 1:
        RETURN component[0].width + 2*DEFAULT_SPACING, component[0].height + 2*DEFAULT_SPACING
    
    
    DECLARE levels AS MAP OF INTEGER TO LIST OF ObjectInfo
    DECLARE root AS ObjectInfo = component[0]  # Первый объект как корень
    DECLARE max_level AS INTEGER = 0
    
    # Распределяем объекты по уровням
    levels[0] = [root]
    DECLARE visited AS SET = {root.id}
    
    WHILE True:
        DECLARE next_level AS LIST OF ObjectInfo
        FOR obj IN levels[max_level]:
            FOR rel IN relations:
                IF rel.id1 == obj.id AND rel.id2 NOT IN visited:
                    DECLARE neighbor AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id2, objects)
                    IF neighbor:
                        ADD neighbor TO next_level
                        ADD neighbor.id TO visited
                ELIF rel.id2 == obj.id AND rel.id1 NOT IN visited:
                    DECLARE neighbor AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id1, objects)
                    IF neighbor:
                        ADD neighbor TO next_level
                        ADD neighbor.id TO visited
        
        IF next_level IS EMPTY:
            BREAK
        
        max_level += 1
        levels[max_level] = next_level
    
    # Рассчитываем размеры
    DECLARE width AS INTEGER = (max_level + 1) * (MAX_SHAPE_WIDTH() + DEFAULT_SPACING) #чтобы уместить все уровни
    DECLARE height AS INTEGER = 0
    
    FOR level IN levels:
        DECLARE level_height AS INTEGER = 0
        DECLARE level_width AS INTEGER = 0 # проверим и обновим в случае широких уровней
        FOR obj IN level:
            level_height = MAX(level_height, obj.height)
            level_width += obj.width + DEFAULT_SPACING
        height += level_height + DEFAULT_SPACING
        width = MAX(width, level_width)
    
    RETURN width, height

# Функция расположения объектов внутри компоненты 
FUNCTION layout_component(component, relations, start_x, start_y):
    # Если в компоненте только один объект
    IF LENGTH(component) == 1:
        component[0].x = start_x
        component[0].y = start_y
        RETURN
    
    DECLARE root AS ObjectInfo = component[0]  # Первый объект как корень
    root.x = start_x
    root.y = start_y + (MAX_SHAPE_HEIGHT() - root.height)/2  # Центрируем по вертикали
    
    DECLARE visited AS SET = {root.id}
    DECLARE queue AS QUEUE OF ObjectInfo = [root]
    DECLARE current_level AS INTEGER = 0
    
    WHILE queue IS NOT EMPTY:
        DECLARE level_size AS INTEGER = LENGTH(queue)
        DECLARE current_x AS INTEGER = start_x + (current_level + 1) * (MAX_SHAPE_WIDTH() + DEFAULT_SPACING)
        DECLARE current_y AS INTEGER = start_y
        DECLARE max_height_in_level AS INTEGER = 0
        
        FOR i FROM 0 TO level_size - 1:
            DECLARE obj AS ObjectInfo = DEQUEUE(queue)
            
            # Находим всех непосещенных соседей
            DECLARE neighbors AS LIST OF ObjectInfo
            FOR rel IN relations:
                IF rel.id1 == obj.id AND rel.id2 NOT IN visited:
                    DECLARE neighbor AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id2, objects)
                    IF neighbor:
                        ADD neighbor TO neighbors
                        ADD neighbor.id TO visited
                ELIF rel.id2 == obj.id AND rel.id1 NOT IN visited:
                    DECLARE neighbor AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id1, objects)
                    IF neighbor:
                        ADD neighbor TO neighbors
                        ADD neighbor.id TO visited
            
            # Располагаем соседей справа от текущего объекта
            IF neighbors IS NOT EMPTY:
                DECLARE total_neighbors_width AS INTEGER = 0
                FOR neighbor IN neighbors:
                    total_neighbors_width += neighbor.width + DEFAULT_SPACING
                
                current_y = start_y + (MAX_SHAPE_HEIGHT() - total_neighbors_width)/2
                
                FOR neighbor IN neighbors:
                    neighbor.x = current_x
                    neighbor.y = current_y
                    current_y += neighbor.height + DEFAULT_SPACING
                    ADD neighbor TO queue
                    max_height_in_level = MAX(max_height_in_level, neighbor.height)
        
        current_level += 1
        start_y += max_height_in_level + DEFAULT_SPACING

# Функция генерации точек для связей
FUNCTION generate_relation_points(objects, relations):
    FOR rel IN relations:
        DECLARE obj1 AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id1, objects)
        DECLARE obj2 AS ObjectInfo = FIND_OBJECT_BY_ID(rel.id2, objects)
        
        IF obj1 AND obj2:
            # Определяем стороны соединения в зависимости от относительного положения
            DECLARE start_side, end_side AS STRING

            IF abs(obj1.y - obj2.y) > abs(obj1.x - obj2.x):
                IF obj1.y < obj2.y:
                    start_side = "bottom"  # Выход снизу obj1
                    end_side = "top"       # Вход сверху obj2
                ELSE:
                    start_side = "top"     # Выход сверху obj1
                    end_side = "bottom"
                
            ELSE:

                IF obj1.x < obj2.x:
                    start_side = "right"
                    end_side = "left"
                ELSE:
                    start_side = "left"
                    end_side = "right"
            
            # Вычисляем точки соединения
            DECLARE start_point, end_point AS (x, y)
            start_point = calculate_connection_point(obj1, start_side)
            end_point = calculate_connection_point(obj2, end_side)
            
            IF abs(start_point.x - end_point.x) < 50:
                rel.points = [start_point, (start_point.x, end_point.y), end_point]

            # Добавляем контрольные точки 
            DECLARE control_x AS INTEGER = (start_point.x + end_point.x) / 2
            rel.points = [
                start_point, # стартовая точка
                (control_x, start_point.y), # до середины горизонтально
                (control_x, end_point.y), # вертикальный спуск до уровня второго объекта
                end_point # конечная точка
            ]
            

# Вспомогательная функция вычисления точки соединения
FUNCTION calculate_connection_point(obj, side):
    SWITCH side:
        CASE "top":
            RETURN (obj.x, obj.y + obj.height/2)
        CASE "bottom":
            RETURN (obj.x, obj.y - obj.height/2)
        CASE "left":
            RETURN (obj.x - obj.width/2, obj.y)
        CASE "right":
            RETURN (obj.x + obj.width/2, obj.y)
    END SWITCH

